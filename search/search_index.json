{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django To Rest is small tool that helps to expose REST api(s) for django models with minimum effort. Some of the features are: Just add a decorator atop of a model and REST apis is created. That's the work!!! Options like filtering and ordering are avilable by default for model fields Easy customizations via the decorator itself Summary: Less time??? Just install the tool and the decorator. Done!!! Documentation: https://anp-scp.github.io/django-to-rest Source Code: https://github.com/anp-scp/django-to-rest Requirements \u00b6 Django to Rest need following requirements : Python 3.8+ Django 4.0.5 djangorestframework 3.13.1 django-filter 22.1 Installation \u00b6 django-to-rest is published as a package and can be installed using pip. Install with (consider creating a virtual environment): pip install django-to-rest Example \u00b6 Let us have a look on an example of how the tool can be used to expose REST API. Make sure that djangorestframework is installed and included in INSTALLED_APPS settings.py as shown below: settings.py 1 2 3 4 5 6 ... INSTALLED_APPS = [ 'rest_framework' , ... ] ... Now create two models as shown below: models.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from django.db import models from django.utils import timezone from django.contrib import admin from to_rest.decorators import restifyModel # (1) # Create your models here. @restifyModel # (2) class Question ( models . Model ): question_text = models . CharField ( max_length = 200 ) pub_date = models . DateTimeField ( 'date published' ) def __str__ ( self ): return self . question_text @restifyModel # (3) class Choice ( models . Model ): question = models . ForeignKey ( Question , on_delete = models . CASCADE , related_name = 'choices' ) choice_text = models . CharField ( max_length = 200 ) votes = models . IntegerField ( default = 0 ) def __str__ ( self ): return self . choice_text Import the decorator from the library Note the way decorator is used Note the way decorator is used Note the use of the decorators. We just need to use the decorator and all the views and serializers would be created during startup. But apart from from that, we need one more line to add in urls.py of the project (not any app) as shown below: urls.py 1 2 3 4 5 6 from to_rest import utils urlpatterns = [ ... ] urlpatterns . extend ( utils . restifyApp ( 'rest/v1' )) # (1) call this method to add the urls in url patterns. Here the parameter 'rest/v1' is the prefix to be used in the url. That's all. Now start the server. And check the dev url http://127.0.0.1:8000/ . Below is an example with httpie: $ http --json http://127.0.0.1:8000/ HTTP/1.1 200 OK Allow: GET, HEAD, OPTIONS Content-Length: 356 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Thu, 07 Jul 2022 15:15:22 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY { \"rest/v1/polls/choice\": \"http://127.0.0.1:8000/rest/v1/polls/choice/\", \"rest/v1/polls/question\": \"http://127.0.0.1:8000/rest/v1/polls/question/\" } Quickstart \u00b6 The quick start guide is a shor tutorial which i sthe fastes way to get everything setup and get an overview of the tool.","title":"Overview"},{"location":"#requirements","text":"Django to Rest need following requirements : Python 3.8+ Django 4.0.5 djangorestframework 3.13.1 django-filter 22.1","title":"Requirements"},{"location":"#installation","text":"django-to-rest is published as a package and can be installed using pip. Install with (consider creating a virtual environment): pip install django-to-rest","title":"Installation"},{"location":"#example","text":"Let us have a look on an example of how the tool can be used to expose REST API. Make sure that djangorestframework is installed and included in INSTALLED_APPS settings.py as shown below: settings.py 1 2 3 4 5 6 ... INSTALLED_APPS = [ 'rest_framework' , ... ] ... Now create two models as shown below: models.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from django.db import models from django.utils import timezone from django.contrib import admin from to_rest.decorators import restifyModel # (1) # Create your models here. @restifyModel # (2) class Question ( models . Model ): question_text = models . CharField ( max_length = 200 ) pub_date = models . DateTimeField ( 'date published' ) def __str__ ( self ): return self . question_text @restifyModel # (3) class Choice ( models . Model ): question = models . ForeignKey ( Question , on_delete = models . CASCADE , related_name = 'choices' ) choice_text = models . CharField ( max_length = 200 ) votes = models . IntegerField ( default = 0 ) def __str__ ( self ): return self . choice_text Import the decorator from the library Note the way decorator is used Note the way decorator is used Note the use of the decorators. We just need to use the decorator and all the views and serializers would be created during startup. But apart from from that, we need one more line to add in urls.py of the project (not any app) as shown below: urls.py 1 2 3 4 5 6 from to_rest import utils urlpatterns = [ ... ] urlpatterns . extend ( utils . restifyApp ( 'rest/v1' )) # (1) call this method to add the urls in url patterns. Here the parameter 'rest/v1' is the prefix to be used in the url. That's all. Now start the server. And check the dev url http://127.0.0.1:8000/ . Below is an example with httpie: $ http --json http://127.0.0.1:8000/ HTTP/1.1 200 OK Allow: GET, HEAD, OPTIONS Content-Length: 356 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Thu, 07 Jul 2022 15:15:22 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY { \"rest/v1/polls/choice\": \"http://127.0.0.1:8000/rest/v1/polls/choice/\", \"rest/v1/polls/question\": \"http://127.0.0.1:8000/rest/v1/polls/question/\" }","title":"Example"},{"location":"#quickstart","text":"The quick start guide is a shor tutorial which i sthe fastes way to get everything setup and get an overview of the tool.","title":"Quickstart"},{"location":"quickstart/","text":"Setup \u00b6 Let us start fresh. Ensure that Python 3.8.x is already installed. It is always better to use virtual environment to isolate your work with other stuffs. Let us create active a virtual env inside the directory quickstart : # Create a virtual environment $ pwd /.../quickstart $ python3 -m venv qs $ source qs/bin/activate Installation \u00b6 # Download the package and install it. Installing below will install dependencies like # django, if not already installed $ (qs) python3 -m pip install django-to-rest-0.1.tar.gz Creation of a django project and app \u00b6 # Create a django project $ pwd /.../quickstart $ (qs) django-admin startproject mysite $ (qs) cd mysite # create an app in the project $ pwd /.../quickstart/mysite $ (qs) python3 manage.py startapp polls $ (qs) python3 manage.py migrate Creation of models \u00b6 Now, let us create some models for our polls app. We will create one model named Question and another named Choice (This is quite similar to the tutoraial available at django documentation). Here, There will be one-to-many relationship from Question to Choice . /.../quickstart/mysite/polls/models.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from django.db import models from django.utils import timezone class Question ( models . Model ): question_text = models . CharField ( max_length = 200 ) pub_date = models . DateTimeField ( 'date published' ) def __str__ ( self ): return self . question_text class Choice ( models . Model ): question = models . ForeignKey ( Question , on_delete = models . CASCADE , related_name = 'choices' ) choice_text = models . CharField ( max_length = 200 ) votes = models . IntegerField ( default = 0 ) def __str__ ( self ): return self . choice_text Activating the app \u00b6 Now, add the polls app to INSTALLED_APPS in settings.py. Also add rest_framework to it as djang-to-rest uses djangorestframework internally: /.../quickstart/mysite/mysite/settings.py 1 2 3 4 5 6 7 ... INSTALLED_APPS = [ 'polls' , 'rest_framework' , ... ] ... After adding the app to INSTALLED_APPS , perform migrations for creating required tables in DB. $ pwd /.../quickstart/mysite $ (qs) python3 manage.py makemigrations polls $ (qs) python3 manage.py migrate Add some data \u00b6 Since, our app and DB is setup, let us create some dummy data to play with them via REST api. $ pwd /.../quickstart/mysite $ python3 manage.py shell Python 3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. (InteractiveConsole) >>> from polls.models import Question, Choice >>> from django.utils import timezone >>> q = Question(question_text=\"How is the traffic?\", pub_date=timezone.now()) >>> q.save() >>> q1 = Question(question_text=\"What's up?\", pub_date=timezone.now()) >>> q1.save() >>> q.choices.create(choice_text=\"Conjested\", votes=0) <Choice: Conjested> >>> q.choices.create(choice_text=\"Clear for miles\", votes=0) <Choice: Clear for miles> >>> q1.choices.create(choice_text=\"Fine\", votes=0) <Choice: Fine> >>> q1.choices.create(choice_text=\"Nohing New\", votes=0) <Choice: Nohing New> Use django-to-rest \u00b6 Now as we have some data to play with, let us use django-to-rest to create our api. To do that, we need to mark the models for which the REST apis need to be created. Let us mark our models for restification!!!: /.../quickstart/mysite/polls/models.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from django.db import models from django.utils import timezone from django.contrib import admin from to_rest.decorators import restifyModel # (1) # Create your models here. @restifyModel # (2) class Question ( models . Model ): question_text = models . CharField ( max_length = 200 ) pub_date = models . DateTimeField ( 'date published' ) def __str__ ( self ): return self . question_text @restifyModel # (3) class Choice ( models . Model ): question = models . ForeignKey ( Question , on_delete = models . CASCADE , related_name = 'choices' ) choice_text = models . CharField ( max_length = 200 ) votes = models . IntegerField ( default = 0 ) def __str__ ( self ): return self . choice_text Import the decorator from the library Note the way decorator is used Note the way decorator is used Now, go to projects urls.py and use the following method to get urls for REST apis: /.../quickstart/mysite/mysite/urls.py 1 2 3 4 5 6 7 8 from django.contrib import admin from django.urls import path from to_rest import utils # (1) urlpatterns = [ path ( 'admin/' , admin . site . urls ), ] urlpatterns . extend ( utils . restifyApp ( 'rest/v1' )) # (2) Import the utils from to_rest Use the method to get the urls. 'rest/v1' is the prefix for the urls for REST apis Now go to project's directory and start the server. $ pwd /.../quickstart/mysite $ python3 manage.py runserver Playing with REST apis \u00b6 Now open a new terminal check our apis using httpie: $ http --json http://127.0.0.1:8000/ HTTP/1.1 200 OK Allow: GET, HEAD, OPTIONS Content-Length: 143 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 11:02:17 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY { \"rest/v1/polls/choice\": \"http://127.0.0.1:8000/rest/v1/polls/choice/\", \"rest/v1/polls/question\": \"http://127.0.0.1:8000/rest/v1/polls/question/\" } List objects \u00b6 $ http --json http://127.0.0.1:8000/rest/v1/polls/question/ HTTP/1.1 200 OK Allow: GET, POST, HEAD, OPTIONS Content-Length: 262 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 11:08:56 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY [ { \"choices\": \"/rest/v1/polls/question/1/choices/\", \"id\": 1, \"pub_date\": \"2022-07-08T10:02:16.290713Z\", \"question_text\": \"How is the traffic?\" }, { \"choices\": \"/rest/v1/polls/question/2/choices/\", \"id\": 2, \"pub_date\": \"2022-07-08T10:03:15.816192Z\", \"question_text\": \"What's up?\" } ] Retreive object \u00b6 $ http --json http://127.0.0.1:8000/rest/v1/polls/question/1/ HTTP/1.1 200 OK Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS Content-Length: 134 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 11:11:49 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY { \"choices\": \"/rest/v1/polls/question/1/choices/\", \"id\": 1, \"pub_date\": \"2022-07-08T10:02:16.290713Z\", \"question_text\": \"How is the traffic?\" } List one-to-many objects \u00b6 $ http --json http://127.0.0.1:8000/rest/v1/polls/question/1/choices/ HTTP/1.1 200 OK Allow: GET, HEAD, OPTIONS Content-Length: 123 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 11:32:31 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY [ { \"choice_text\": \"Conjested\", \"id\": 1, \"question\": 1, \"votes\": 0 }, { \"choice_text\": \"Clear for miles\", \"id\": 2, \"question\": 1, \"votes\": 0 } ] Filter using model attributes \u00b6 $ http --json http://127.0.0.1:8000/rest/v1/polls/question/1/choices/?choice_text=Conjested HTTP/1.1 200 OK Allow: GET, HEAD, OPTIONS Content-Length: 59 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 11:34:22 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY [ { \"choice_text\": \"Conjested\", \"id\": 1, \"question\": 1, \"votes\": 0 } ] Search using model attributes \u00b6 $ http --json http://127.0.0.1:8000/rest/v1/polls/question/1/choices/?search=miles HTTP/1.1 200 OK Allow: GET, HEAD, OPTIONS Content-Length: 65 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 11:36:36 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY [ { \"choice_text\": \"Clear for miles\", \"id\": 2, \"question\": 1, \"votes\": 0 } ] Ordering using model attributes \u00b6 $ http --json http://127.0.0.1:8000/rest/v1/polls/choice/?ordering=-choice_text HTTP/1.1 200 OK Allow: GET, POST, HEAD, OPTIONS Content-Length: 235 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 11:52:26 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY [ { \"choice_text\": \"Nohing New\", \"id\": 4, \"question\": 2, \"votes\": 0 }, { \"choice_text\": \"Fine\", \"id\": 3, \"question\": 2, \"votes\": 0 }, { \"choice_text\": \"Conjested\", \"id\": 1, \"question\": 1, \"votes\": 0 }, { \"choice_text\": \"Clear for miles\", \"id\": 2, \"question\": 1, \"votes\": 0 } ] Partially update (PATCH) \u00b6 Note Here, httpie is used for examples. Hence, JSON like body is not used for PUT, PATCH, POST requests for body. Instead, httpie style is used. Other clients can also be used if any difficulty is faced. $ http PATCH http://127.0.0.1:8000/rest/v1/polls/choice/1/ choice_text=Highly\\ Conjested HTTP/1.1 200 OK Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS Content-Length: 64 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 15:06:21 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY { \"choice_text\": \"Highly Conjested\", \"id\": 1, \"question\": 1, \"votes\": 0 } Create (POST) \u00b6 $ http POST http://127.0.0.1:8000/rest/v1/polls/choice/ choice_text=Doing\\ bad question=2 votes=0 HTTP/1.1 201 Created Allow: GET, POST, HEAD, OPTIONS Content-Length: 57 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 15:19:40 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY { \"choice_text\": \"Doing bad\", \"id\": 5, \"question\": 2, \"votes\": 0 }","title":"Quickstart Guide"},{"location":"quickstart/#setup","text":"Let us start fresh. Ensure that Python 3.8.x is already installed. It is always better to use virtual environment to isolate your work with other stuffs. Let us create active a virtual env inside the directory quickstart : # Create a virtual environment $ pwd /.../quickstart $ python3 -m venv qs $ source qs/bin/activate","title":"Setup"},{"location":"quickstart/#installation","text":"# Download the package and install it. Installing below will install dependencies like # django, if not already installed $ (qs) python3 -m pip install django-to-rest-0.1.tar.gz","title":"Installation"},{"location":"quickstart/#creation-of-a-django-project-and-app","text":"# Create a django project $ pwd /.../quickstart $ (qs) django-admin startproject mysite $ (qs) cd mysite # create an app in the project $ pwd /.../quickstart/mysite $ (qs) python3 manage.py startapp polls $ (qs) python3 manage.py migrate","title":"Creation of a django project and app"},{"location":"quickstart/#creation-of-models","text":"Now, let us create some models for our polls app. We will create one model named Question and another named Choice (This is quite similar to the tutoraial available at django documentation). Here, There will be one-to-many relationship from Question to Choice . /.../quickstart/mysite/polls/models.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from django.db import models from django.utils import timezone class Question ( models . Model ): question_text = models . CharField ( max_length = 200 ) pub_date = models . DateTimeField ( 'date published' ) def __str__ ( self ): return self . question_text class Choice ( models . Model ): question = models . ForeignKey ( Question , on_delete = models . CASCADE , related_name = 'choices' ) choice_text = models . CharField ( max_length = 200 ) votes = models . IntegerField ( default = 0 ) def __str__ ( self ): return self . choice_text","title":"Creation of models"},{"location":"quickstart/#activating-the-app","text":"Now, add the polls app to INSTALLED_APPS in settings.py. Also add rest_framework to it as djang-to-rest uses djangorestframework internally: /.../quickstart/mysite/mysite/settings.py 1 2 3 4 5 6 7 ... INSTALLED_APPS = [ 'polls' , 'rest_framework' , ... ] ... After adding the app to INSTALLED_APPS , perform migrations for creating required tables in DB. $ pwd /.../quickstart/mysite $ (qs) python3 manage.py makemigrations polls $ (qs) python3 manage.py migrate","title":"Activating the app"},{"location":"quickstart/#add-some-data","text":"Since, our app and DB is setup, let us create some dummy data to play with them via REST api. $ pwd /.../quickstart/mysite $ python3 manage.py shell Python 3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. (InteractiveConsole) >>> from polls.models import Question, Choice >>> from django.utils import timezone >>> q = Question(question_text=\"How is the traffic?\", pub_date=timezone.now()) >>> q.save() >>> q1 = Question(question_text=\"What's up?\", pub_date=timezone.now()) >>> q1.save() >>> q.choices.create(choice_text=\"Conjested\", votes=0) <Choice: Conjested> >>> q.choices.create(choice_text=\"Clear for miles\", votes=0) <Choice: Clear for miles> >>> q1.choices.create(choice_text=\"Fine\", votes=0) <Choice: Fine> >>> q1.choices.create(choice_text=\"Nohing New\", votes=0) <Choice: Nohing New>","title":"Add some data"},{"location":"quickstart/#use-django-to-rest","text":"Now as we have some data to play with, let us use django-to-rest to create our api. To do that, we need to mark the models for which the REST apis need to be created. Let us mark our models for restification!!!: /.../quickstart/mysite/polls/models.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from django.db import models from django.utils import timezone from django.contrib import admin from to_rest.decorators import restifyModel # (1) # Create your models here. @restifyModel # (2) class Question ( models . Model ): question_text = models . CharField ( max_length = 200 ) pub_date = models . DateTimeField ( 'date published' ) def __str__ ( self ): return self . question_text @restifyModel # (3) class Choice ( models . Model ): question = models . ForeignKey ( Question , on_delete = models . CASCADE , related_name = 'choices' ) choice_text = models . CharField ( max_length = 200 ) votes = models . IntegerField ( default = 0 ) def __str__ ( self ): return self . choice_text Import the decorator from the library Note the way decorator is used Note the way decorator is used Now, go to projects urls.py and use the following method to get urls for REST apis: /.../quickstart/mysite/mysite/urls.py 1 2 3 4 5 6 7 8 from django.contrib import admin from django.urls import path from to_rest import utils # (1) urlpatterns = [ path ( 'admin/' , admin . site . urls ), ] urlpatterns . extend ( utils . restifyApp ( 'rest/v1' )) # (2) Import the utils from to_rest Use the method to get the urls. 'rest/v1' is the prefix for the urls for REST apis Now go to project's directory and start the server. $ pwd /.../quickstart/mysite $ python3 manage.py runserver","title":"Use django-to-rest"},{"location":"quickstart/#playing-with-rest-apis","text":"Now open a new terminal check our apis using httpie: $ http --json http://127.0.0.1:8000/ HTTP/1.1 200 OK Allow: GET, HEAD, OPTIONS Content-Length: 143 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 11:02:17 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY { \"rest/v1/polls/choice\": \"http://127.0.0.1:8000/rest/v1/polls/choice/\", \"rest/v1/polls/question\": \"http://127.0.0.1:8000/rest/v1/polls/question/\" }","title":"Playing with REST apis"},{"location":"quickstart/#list-objects","text":"$ http --json http://127.0.0.1:8000/rest/v1/polls/question/ HTTP/1.1 200 OK Allow: GET, POST, HEAD, OPTIONS Content-Length: 262 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 11:08:56 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY [ { \"choices\": \"/rest/v1/polls/question/1/choices/\", \"id\": 1, \"pub_date\": \"2022-07-08T10:02:16.290713Z\", \"question_text\": \"How is the traffic?\" }, { \"choices\": \"/rest/v1/polls/question/2/choices/\", \"id\": 2, \"pub_date\": \"2022-07-08T10:03:15.816192Z\", \"question_text\": \"What's up?\" } ]","title":"List objects"},{"location":"quickstart/#retreive-object","text":"$ http --json http://127.0.0.1:8000/rest/v1/polls/question/1/ HTTP/1.1 200 OK Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS Content-Length: 134 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 11:11:49 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY { \"choices\": \"/rest/v1/polls/question/1/choices/\", \"id\": 1, \"pub_date\": \"2022-07-08T10:02:16.290713Z\", \"question_text\": \"How is the traffic?\" }","title":"Retreive object"},{"location":"quickstart/#list-one-to-many-objects","text":"$ http --json http://127.0.0.1:8000/rest/v1/polls/question/1/choices/ HTTP/1.1 200 OK Allow: GET, HEAD, OPTIONS Content-Length: 123 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 11:32:31 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY [ { \"choice_text\": \"Conjested\", \"id\": 1, \"question\": 1, \"votes\": 0 }, { \"choice_text\": \"Clear for miles\", \"id\": 2, \"question\": 1, \"votes\": 0 } ]","title":"List one-to-many objects"},{"location":"quickstart/#filter-using-model-attributes","text":"$ http --json http://127.0.0.1:8000/rest/v1/polls/question/1/choices/?choice_text=Conjested HTTP/1.1 200 OK Allow: GET, HEAD, OPTIONS Content-Length: 59 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 11:34:22 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY [ { \"choice_text\": \"Conjested\", \"id\": 1, \"question\": 1, \"votes\": 0 } ]","title":"Filter using model attributes"},{"location":"quickstart/#search-using-model-attributes","text":"$ http --json http://127.0.0.1:8000/rest/v1/polls/question/1/choices/?search=miles HTTP/1.1 200 OK Allow: GET, HEAD, OPTIONS Content-Length: 65 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 11:36:36 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY [ { \"choice_text\": \"Clear for miles\", \"id\": 2, \"question\": 1, \"votes\": 0 } ]","title":"Search using model attributes"},{"location":"quickstart/#ordering-using-model-attributes","text":"$ http --json http://127.0.0.1:8000/rest/v1/polls/choice/?ordering=-choice_text HTTP/1.1 200 OK Allow: GET, POST, HEAD, OPTIONS Content-Length: 235 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 11:52:26 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY [ { \"choice_text\": \"Nohing New\", \"id\": 4, \"question\": 2, \"votes\": 0 }, { \"choice_text\": \"Fine\", \"id\": 3, \"question\": 2, \"votes\": 0 }, { \"choice_text\": \"Conjested\", \"id\": 1, \"question\": 1, \"votes\": 0 }, { \"choice_text\": \"Clear for miles\", \"id\": 2, \"question\": 1, \"votes\": 0 } ]","title":"Ordering using model attributes"},{"location":"quickstart/#partially-update-patch","text":"Note Here, httpie is used for examples. Hence, JSON like body is not used for PUT, PATCH, POST requests for body. Instead, httpie style is used. Other clients can also be used if any difficulty is faced. $ http PATCH http://127.0.0.1:8000/rest/v1/polls/choice/1/ choice_text=Highly\\ Conjested HTTP/1.1 200 OK Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS Content-Length: 64 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 15:06:21 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY { \"choice_text\": \"Highly Conjested\", \"id\": 1, \"question\": 1, \"votes\": 0 }","title":"Partially update (PATCH)"},{"location":"quickstart/#create-post","text":"$ http POST http://127.0.0.1:8000/rest/v1/polls/choice/ choice_text=Doing\\ bad question=2 votes=0 HTTP/1.1 201 Created Allow: GET, POST, HEAD, OPTIONS Content-Length: 57 Content-Type: application/json Cross-Origin-Opener-Policy: same-origin Date: Fri, 08 Jul 2022 15:19:40 GMT Referrer-Policy: same-origin Server: WSGIServer/0.2 CPython/3.8.10 Vary: Accept, Cookie X-Content-Type-Options: nosniff X-Frame-Options: DENY { \"choice_text\": \"Doing bad\", \"id\": 5, \"question\": 2, \"votes\": 0 }","title":"Create (POST)"},{"location":"full_guide/adding_custom_serializer/","text":"As mentioned earlier, to_rest.decorators.restifyModel decorator can also be used with parameters. The custom serializer needs to be passed via the parameter customViewParams . Let us consider the below model: models.py 1 2 3 4 5 6 7 from django.db import models class StudentWithCustomSerializer ( models . Model ): name = models . CharField ( max_length = 50 ) def __str__ ( self ): return \"[name= {} , year= {} ]\" . format ( self . name , self . year ) And now let us create a simple serializer for the same. serializers.py 1 2 3 4 5 6 7 8 9 10 from rest_framework import serializers class StudentWithCustomSerializerSerializer ( serializers . Serializer ): id = serializers . IntegerField ( read_only = True ) name = serializers . CharField () def create ( self , validated_data ): from test_basics.models import StudentWithCustomSerializer # (1) return StudentWithCustomSerializer . objects . create ( ** validated_data ) using local import to prevernt circular import Note that at line 9 in the above code the model StudentWithCustomSerializer is imported locally in the method. This is done to prevent circular import issues. Since, we need to provide this custom serializer to the decorator on the model, and if the model here is imported globally then it would be like the model is imported in the models.py itself. Thus, raising the Import Error due to circular import issues. Now let us create a new file in the same working directory called view_params.py and create the dictionary customViewParams : view_params.py 1 2 3 4 5 6 from to_rest import constants from test_basics import serializers # Create your views here. customViewParams = dict () customViewParams [ constants . SERIALIZER_CLASS ] = serializers . StudentWithCustomSerializerSerializer Now, let us go back to models.py and see how to provide the custom serializer that we created. models.py 1 2 3 4 5 6 7 8 9 10 from django.db import models from to_rest.decorators import restifyModel from test_basics.view_params import customViewParams #Here, test_basics is the app directory @restifyModel ( customViewParams = customViewParams ) class StudentWithCustomSerializer ( models . Model ): name = models . CharField ( max_length = 50 ) def __str__ ( self ): return \"[name= {} , year= {} ]\" . format ( self . name , self . year ) Note the way customViewParams is passed to the decorator at line 5.","title":"Adding custom Serializer"},{"location":"full_guide/marking_model_for_REST/","text":"To create REST APIs for a model, first we need to mark the model. And to mark the model, use the decorator to_rest.decorators.restifyModel . The decorator can be used in the following two ways: Without Parameters : When used without parameters, all the defaults would be applied. For example: /.../quickstart/mysite/polls/models.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from django.db import models from django.utils import timezone from django.contrib import admin from to_rest.decorators import restifyModel # (1) # Create your models here. @restifyModel # (2) class Question ( models . Model ): question_text = models . CharField ( max_length = 200 ) pub_date = models . DateTimeField ( 'date published' ) def __str__ ( self ): return self . question_text @restifyModel # (3) class Choice ( models . Model ): question = models . ForeignKey ( Question , on_delete = models . CASCADE , related_name = 'choices' ) choice_text = models . CharField ( max_length = 200 ) votes = models . IntegerField ( default = 0 ) def __str__ ( self ): return self . choice_text Import the decorator from the library Note the way decorator is used Note the way decorator is used With Parameters : The decorator accepts the following parameters customViewParams (dict) : To provide customized methods and variables for view set. For example, custom serializer, list method, create method, retreive method, update method, partial_update method, delete method, get_object methhod, get_queryset, et. excludeFields (list) : The fields that needs to be excluded from the JSON object. Provided fields will not be included in the serializer. If customSerializer is provided then this parameter will be ignored. methodFields (list) : The list of methods as read only fields. This can be used to include the model's methods output as field. This include only those field that don't take any parameter. requiredReverseRelFields (list) : Whenever a one to one relation is created, a reverse field is also included in the serializer for the model in the other side of relationship To make those a required field in post and put. Provide the list of fields. For example: serializers.py view_params.py models.py 1 2 3 4 5 6 7 8 9 10 11 from rest_framework import serializers class StudentWithCustomSerializerSerializer ( serializers . Serializer ): id = serializers . IntegerField ( read_only = True ) name = serializers . CharField () def create ( self , validated_data ): from test_basics.models import StudentWithCustomSerializer # (1) return StudentWithCustomSerializer . objects . create ( ** validated_data ) using local import to prevernt circular import 1 2 3 4 5 6 from to_rest import constants from test_basics import serializers # Create your views here. customViewParams = dict () customViewParams [ constants . SERIALIZER_CLASS ] = serializers . StudentWithCustomSerializerSerializer 1 2 3 4 5 6 7 8 9 10 from django.db import models from to_rest.decorators import restifyModel from test_basics.view_params import customViewParams #Here, test_basics is the app directory @restifyModel ( customViewParams = customViewParams ) class StudentWithCustomSerializer ( models . Model ): name = models . CharField ( max_length = 50 ) def __str__ ( self ): return \"[name= {} , year= {} ]\" . format ( self . name , self . year )","title":"Marking models to create REST APIs"}]}